MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[control_samples],
x[inf_samples])
return(t_test_result$p.value)
})
zscore_adjusted_p_values <- p.adjust(zscore_t_test_p_values,
method = "fdr")
names(zscore_adjusted_p_values[zscore_adjusted_p_values < 0.05])
table(zscore_adjusted_p_values < 0.05)
zscore_adjusted_p_values[order(zscore_adjusted_p_values, decreasing = F)]
.libPaths()
.libPaths()
pheatmap(plage_output_df)
plage_adjusted_p_values[order(plage_adjusted_p_values, decreasing = F)]
length(plage_adjusted_p_values < 0.05)
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
pheatmap(gsva_output_df)
.libPaths()
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/rRoma_obj_breast_cptac.Rdata")
pheatmap::pheatmap(rRoma.prot$ModuleMatrix)
pheatmap::pheatmap(rRoma.prot$SampleMatrix)
source("~/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_gsva.R")
.libPaths()
library(rRoma)
summary(MatData)
summary(sample_labels)
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
AllHall
.libPaths()
?install.packages
version
library(rRoma)
summary(MatData)
View(MatData)
dim(MatData)
MatData <- MatData[!rownames(MatData)== "", ]
sample_labels
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall
lapply(AllHall, function(x) print(x['Name']))
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
lapply(AllHall, function(x) print(x['Name']))
?rROMA.R
?rROMA.R()
set.seed(123)
rRoma.output <- rRoma.R(MatData, AllHall)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
View(rRoma.output)
load("./Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
View(Rehman_exp_RNA_matrix_norm)
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_sample_labels.Rda")
View(Rehman_exp_coldata)
View(rRoma.output$ModuleMatrix)
View(rRoma.output$ModuleMatrix)
shifted.modules <- which(rRoma.output$ModuleMatrix[, "ppv Median Exp"] <= 0.05)
shifted.modules
length(shifted.modules)
devtools::install_github("sysbio-curie/rRoma@main")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
devtools::install_github("sysbio-curie/rRoma@fix_bug")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
library(OmnipathR)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(tidyr)
library(dplyr)
library(cluster)
source("/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_comparison_scripts/fgsea_output_preprocess.R")
fgsea_lists <- lapply(fgsea_results_list,
function(fgsea_df) {return(fgsea_diff_activated(fgsea_df, padj_threshold = 0.25))})
fgsea_nes_combined_df <- data.frame()
for (i_study in seq_along(fgsea_lists)){
# print(i_study)
fgsea_df <- fgsea_lists[[i_study]]
cols_to_combine <- fgsea_df[,c("pathway",
# "padj",
"NES")]
colnames(cols_to_combine) <- c("pathway",
# paste("NES",
studies_names[[i_study]])
# sep = "."))
if (i_study==1){
fgsea_nes_combined_df <- cols_to_combine
} else {
fgsea_nes_combined_df <- merge(fgsea_nes_combined_df,
cols_to_combine,
by ="pathway",
all = TRUE)
}
}
fgsea_nes_combined_df <- data.frame(fgsea_nes_combined_df)
rownames(fgsea_nes_combined_df) <- fgsea_nes_combined_df$pathway
fgsea_nes_combined_df$pathway <- NULL
fgsea_nes_combined_matrix <- t(apply( fgsea_nes_combined_df, 2, as.numeric))
colnames(fgsea_nes_combined_matrix) <- rownames(fgsea_nes_combined_df)
# distfunc <- function(x) daisy(x, metric = "euclidean")
# check for instances present in only 2 datasets
# test <- apply(fgsea_nes_combined_matrix, 2, function(v) length(table(v)) == 2)
# d <- distfunc(fgsea_nes_combined_matrix)
#
# clust <- pheatmap(as.matrix(d),
#          show_rownames = T)
# #
# studies_order <- gsub(x = studies_names[clust$tree_col$order],
#                       pattern = "[ |-]",
#                       replacement = ".")
fgsea_nb_diff_pathways_per_study <- data.frame()
for (i_study in 1:length(fgsea_lists)){
fgsea_app_output <- fgsea_lists[[i_study]]
fgsea_nb_diff_pathways_per_study <- rbind(fgsea_nb_diff_pathways_per_study,
data.frame(study = names(fgsea_lists)[i_study],
nb_pathways = nrow(fgsea_app_output),
UP = nrow(fgsea_app_output[which(fgsea_app_output$diff_activated=="UP"),]),
DOWN = nrow(fgsea_app_output[which(fgsea_app_output$diff_activated=="DOWN"),])))
}
fgsea_nb_diff_pathways_per_study_long <- melt(fgsea_nb_diff_pathways_per_study,
id.vars = c("study"),
variable.name = "shift",
value.name = "nb")
fgsea_nb_diff_pathways_per_study_long <- fgsea_nb_diff_pathways_per_study %>%
pivot_longer(cols = c("UP","DOWN"),
names_to = "shift",
values_to = "nb")
# id.vars = c("study"),
# variable.name = "shift",
# value.name = "nb")
fgsea_nb_diff_pathways_per_study_long$study <- factor(fgsea_nb_diff_pathways_per_study_long$study,
levels = studies_names)
nb_diff_pathways_barplot <- ggplot(fgsea_nb_diff_pathways_per_study_long, aes(x=study, y=nb, fill=shift))+
geom_bar(stat = "identity", position = position_dodge())+
scale_fill_manual(values = c(brewer.pal(3,"Greys")[2],
brewer.pal(11,"RdYlGn")[c(10,2)]))
source("/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_comparison_scripts/fgsea_comparison_utils.R")
names(fgsea_lists) <- gsub(pattern = "-| ",replacement = ".", names(fgsea_lists))
fgsea_es_diff_pathways <- fgsea_nes_diff_pathways_in_common(fgsea_lists = fgsea_lists,
fgsea_combined_df = fgsea_nes_combined_df,
# studies_order = studies_order,
nb_in_common = 3)
diff_intersections_summary <- fgsea_diff_pathways_in_common(fgsea_lists = fgsea_lists,
# studies_order = studies_order,
nb_in_common = 3)
# mask <- sapply(diff_intersections_summary, as.logical)
# fgsea_es_diff_pathways[!mask] <- NA
# save(fgsea_es_diff_pathways,
#      file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_nes_diff_pathways_2022_09_15.RData")
View(fgsea_es_diff_pathways)
View(fgsea_es_diff_pathways)
diff_intersections_summary <- fgsea_diff_pathways_in_common(fgsea_lists = fgsea_lists,
# studies_order = studies_order,
nb_in_common = 3)
View(diff_intersections_summary)
fgsea_lists
View(fgsea_lists$Saint.Criq.UNC)
# load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_2021_01_27.RData"
load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_kegg_pathways_2022_09_07.RData")
# load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_2021_01_27.RData"
load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_kegg_pathways_2022_09_07.RData")
Saint_Criq_UNC_fgsea <- fgseaRes
Saint_Criq_UNC_fgsea <- Saint_Criq_UNC_fgsea[which(Saint_Criq_UNC_fgsea$pathway %in% remove_REACTOME(Saint_Criq_UNC_fgsea$pathway)),]
View(Saint_Criq_UNC_fgsea)
.libPaths()
library(igraph)
library(ggplot2)
source("scripts/pathways_to_network/network_utils.R")
source("~/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/scripts/CFnetwork_dependencies.R")
source("~/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/scripts/CFnetwork_dependencies.R")
BiocManager::install("OmnipathR")
if (!requireNamespace("igraph")){
install.packages("igraph")
}
if (!requireNamespace("igraph")){
install.packages("igraph", type="binary")
}
install.packages("igraph", type="binary")
install.packages("igraph")
which R
install.packages('igraph')
.libPaths()
library(tibble)
library(dplyr)
CF_PPI_network.lcc.node_type.interactions <-
read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/data/kegg_diff_pathways_network/diff_kegg_pathways_with_CFTR_interactors_PPI_direct_tagged_interactions_df.txt",
sep = "\t",
header = T,
check.names = F)
CF_PPI_network.lcc.node_type.nodes <-
read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/data/kegg_diff_pathways_network/diff_kegg_pathways_with_CFTR_interactors_PPI_direct_tagged_nodes_df.txt",
sep = "\t",
header = T,
check.names = F)
dm_CF_NCF_sup_table3_1267CpG <-
read.table(file = "/Users/matthieu/ownCloud/Suite/CFMethylomeSysbio/dm_CpG_CF_NCF_Magalhaes_2018_sup_table_3.tsv",
skip = 1,
quote = "\"",
sep = "\t",
header = T,
check.names = F)
dm_CF_NCF_sup_table3_1267CpG <-
dm_CF_NCF_sup_table3_1267CpG[order(dm_CF_NCF_sup_table3_1267CpG$`p-value`),]
dm_CF_NCF_sup_table3_1267CpG$CpG_rank <- 1:dim(dm_CF_NCF_sup_table3_1267CpG)[1]
dm_CF_NCF_sup_table3_1267CpG_onlyGenes <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$`Genomic location`=="Body"),]
dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene_rank <- 1:dim(dm_CF_NCF_sup_table3_1267CpG_onlyGenes)[1]
dm_CF_NCF_sup_table3_1267CpG_Genes.list <- unique(dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene)
dm_CF_NCF_Genes_in_CF_network.list <-
dm_CF_NCF_sup_table3_1267CpG_Genes.list[which(dm_CF_NCF_sup_table3_1267CpG_Genes.list %in% CF_PPI_network.lcc.node_type.nodes$Symbol)]
dm_CF_NCF_Genes_in_CF_network.CF_network_df <-
CF_PPI_network.lcc.node_type.nodes[which(CF_PPI_network.lcc.node_type.nodes$Symbol %in% dm_CF_NCF_Genes_in_CF_network.list),]
dm_CF_NCF_Genes_in_CF_network.dm_CF_NCF_df <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$Gene %in% dm_CF_NCF_Genes_in_CF_network.list),]
View(dm_CF_NCF_Genes_in_CF_network.CF_network_df)
View(dm_CF_NCF_Genes_in_CF_network.dm_CF_NCF_df)
View(dm_CF_NCF_sup_table3_1267CpG_onlyGenes)
Vkew
View(dm_CF_NCF_sup_table3_1267CpG)
table(dm_CF_NCF_sup_table3_1267CpG$`Genomic location`)
dm_CF_NCF_sup_table3_1267CpG_onlyGenes <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$`Genomic location` %in% c("Body", "TSS1500", "TS200")),]
dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene_rank <- 1:dim(dm_CF_NCF_sup_table3_1267CpG_onlyGenes)[1]
dm_CF_NCF_sup_table3_1267CpG_Genes.list <- unique(dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene)
length(dm_CF_NCF_sup_table3_1267CpG_Genes.list)
dm_CF_NCF_sup_table3_1267CpG_onlyGenes <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$`Genomic location`!="Intergenic"),]
dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene_rank <- 1:dim(dm_CF_NCF_sup_table3_1267CpG_onlyGenes)[1]
dm_CF_NCF_sup_table3_1267CpG_Genes.list <- unique(dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene)
length(dm_CF_NCF_sup_table3_1267CpG_Genes.list)
length(unique(dm_CF_NCF_sup_table3_1267CpG$Gene))
dm_CF_NCF_sup_table3_1267CpG_Genes.list <- unique(dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene)
dm_CF_NCF_sup_table3_1267CpG_onlyGenes <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$`Genomic location`!="Intergenic"),]
dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene_rank <- 1:dim(dm_CF_NCF_sup_table3_1267CpG_onlyGenes)[1]
dm_CF_NCF_sup_table3_1267CpG_Genes.list <- unique(dm_CF_NCF_sup_table3_1267CpG_onlyGenes$Gene)
dm_CF_NCF_Genes_in_CF_network.list <-
dm_CF_NCF_sup_table3_1267CpG_Genes.list[which(dm_CF_NCF_sup_table3_1267CpG_Genes.list %in% CF_PPI_network.lcc.node_type.nodes$Symbol)]
dm_CF_NCF_Genes_in_CF_network.CF_network_df <-
CF_PPI_network.lcc.node_type.nodes[which(CF_PPI_network.lcc.node_type.nodes$Symbol %in% dm_CF_NCF_Genes_in_CF_network.list),]
dm_CF_NCF_Genes_in_CF_network.dm_CF_NCF_df <-
dm_CF_NCF_sup_table3_1267CpG[which(dm_CF_NCF_sup_table3_1267CpG$Gene %in% dm_CF_NCF_Genes_in_CF_network.list),]
View(dm_CF_NCF_Genes_in_CF_network.dm_CF_NCF_df)
.libPaths()
install.packages("cyjShiny")
library(shiny)
library(cyjShiny)
library(graph)
library(jsonlite)
# NETWORK DATA ----
tbl_nodes <- data.frame(id=c("A", "B", "C"),
size=c(10, 20, 30),
stringsAsFactors=FALSE)
# Must have the interaction column
tbl_edges <- data.frame(source=c("A", "B", "C"),
target=c("B", "C", "A"),
interaction=c("inhibit", "stimulate", "inhibit"),
stringsAsFactors=FALSE)
graph_json <- toJSON(dataFramesToJSON(tbl_edges, tbl_nodes), auto_unbox=TRUE)
# UI ----
ui <- fluidPage(cyjShinyOutput('cyjShiny'))
# SERVER ----
server <- function(input, output, session) {
output$cyjShiny <- renderCyjShiny({
# Layouts (see js.cytoscape.org): cola, cose, circle, concentric, grid, breadthfirst, random, fcose, spread
cyjShiny(graph_json, layoutName="cola")
})
}
# RUN ----
shinyApp(ui=ui, server=server)
# graph_json <- toJSON(dataFramesToJSON(tbl_edges, tbl_nodes), auto_unbox=TRUE)
graph.json.filename <- "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork_cytoscape/CF_network_kegg_diff_pathways_with_CFTR_interactors.cyjs"
# UI ----
ui <- fluidPage(cyjShinyOutput('cyjShiny'))
# SERVER ----
server <- function(input, output, session) {
output$cyjShiny <- renderCyjShiny({
graphAsJSON <- readAndStandardizeJSONNetworkFile(graph.json.filename)
# Layouts (see js.cytoscape.org): cola, cose, circle, concentric, grid, breadthfirst, random, fcose, spread
cyjShiny(graphAsJSON, layoutName="cola")
})
}
# RUN ----
shinyApp(ui=ui, server=server)
# graph_json <- toJSON(dataFramesToJSON(tbl_edges, tbl_nodes), auto_unbox=TRUE)
graph.json.filename <- "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork_cytoscape/CF_network_kegg_diff_pathways_with_CFTR_interactors.cyjs"
style.json.filename <- "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork_cytoscape/CF_network_style.json"
# UI ----
ui <- fluidPage(cyjShinyOutput('cyjShiny'))
# SERVER ----
server <- function(input, output, session) {
output$cyjShiny <- renderCyjShiny({
graphAsJSON <- readAndStandardizeJSONNetworkFile(graph.json.filename)
# Layouts (see js.cytoscape.org): cola, cose, circle, concentric, grid, breadthfirst, random, fcose, spread
cyjShiny(graphAsJSON, styleFile=style.json.filename, layoutName="cola")
})
}
# RUN ----
shinyApp(ui=ui, server=server)
source("~/.active-rstudio-document")
---
title: "cyjShiny Demo"
---
# Load Library
```{r include = FALSE}
library(cyjShiny)
```
install.packages("cyjShiny")
install.packages("graph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
library(cyjShiny)
library(graph)
install.packages("cyjShiny")
library(cyjShiny)
library(shiny)
install.packages("shiny")
library(shiny)
getwd()
setwd("ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork_cytoscape/'
)
""
setwd("ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork_cytoscape")
#----------------------------------------------------------------------------------------------------
# create  data.frames for nodes, edges, and two simulated experimental variables, in 3 conditions
#----------------------------------------------------------------------------------------------------
tbl.nodes <- data.frame(id=c("A", "B", "C"),
type=c("kinase", "TF", "glycoprotein"),
lfc=c(1, 1, 1),
count=c(0, 0, 0),
stringsAsFactors=FALSE)
tbl.edges <- data.frame(source=c("A", "B", "C"),
target=c("B", "C", "A"),
interaction=c("phosphorylates", "synthetic lethal", "unknown"),
stringsAsFactors=FALSE)
graph.json <- dataFramesToJSON(tbl.edges, tbl.nodes)
tbl.lfc <- data.frame(A=c(0,  1,   1,  -3),
B=c(0,  3,   2,   3),
C=c(0, -3,  -2,  -1),
stringsAsFactors=FALSE)
library(cyjShiny)
library(DT)
library(later)
#----------------------------------------------------------------------------------------------------
# create  data.frames for nodes, edges, and two simulated experimental variables, in 3 conditions
#----------------------------------------------------------------------------------------------------
tbl.nodes <- data.frame(id=c("A", "B", "C"),
type=c("kinase", "TF", "glycoprotein"),
lfc=c(1, 1, 1),
count=c(0, 0, 0),
stringsAsFactors=FALSE)
tbl.edges <- data.frame(source=c("A", "B", "C"),
target=c("B", "C", "A"),
interaction=c("phosphorylates", "synthetic lethal", "unknown"),
stringsAsFactors=FALSE)
graph.json <- dataFramesToJSON(tbl.edges, tbl.nodes)
tbl.lfc <- data.frame(A=c(0,  1,   1,  -3),
B=c(0,  3,   2,   3),
C=c(0, -3,  -2,  -1),
stringsAsFactors=FALSE)
rownames(tbl.lfc) <- c("baseline", "cond1", "cond2", "cond3")
tbl.count <- data.frame(A=c(1, 10,  100, 150),
B=c(1, 5,   80,  3),
C=c(1, 100, 50,  300),
stringsAsFactors=FALSE)
rownames(tbl.count) <- c("baseline", "cond1", "cond2", "cond3")
#----------------------------------------------------------------------------------------------------
ui = shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("doLayout", "Select Layout:",
choices=c("",
"cose",
"cola",
"circle",
"concentric",
"breadthfirst",
"grid",
"random",
"preset",
"fcose")),
width=2
),
mainPanel(fluidRow(
cyjShinyOutput('cyjShiny', width="400px", height="200px"),
DTOutput("table")
),
width=10)
) # sidebarLayout
))
#----------------------------------------------------------------------------------------------------
server = function(input, output, session)
{
observeEvent(input$doLayout,  ignoreInit=TRUE,{
if(input$doLayout != ""){
strategy <- input$doLayout
doLayout(session, strategy)
later(function() {updateSelectInput(session, "doLayout", selected=character(0))}, 1)
}
})
output$cyjShiny <- renderCyjShiny({
cyjShiny(graph=graph.json, layoutName="cola", height=300)
})
output$table = DT::renderDataTable(tbl.count,
width="400px",
class='nowrap display',
selection="single",
extensions="FixedColumns",
options=list(dom='t',
paging=FALSE,
autowWdth=TRUE
))
}
#----------------------------------------------------------------------------------------------------
app <- shinyApp(ui = ui, server = server)
app
runApp('~/ownCloud/Code/cyjShiny/inst/demos/basicDemo')
runApp('~/ownCloud/Code/cyjShiny/inst/demos/basicDemo')
graph.json.filename <- "CF_network_kegg_diff_pathways_with_CFTR_interactors_and_CFTR_without_unconnected_components.cyjs"
graph <- fromJSON(graph.json.filename,
flatten = TRUE)
setwd(dir = "shinyApp/")
graph.json.filename <- "CF_network_kegg_diff_pathways_with_CFTR_interactors_and_CFTR_without_unconnected_components.cyjs"
graph <- fromJSON(graph.json.filename,
flatten = TRUE)
graph.nodes.df <- graph$elements$nodes
graphAsJSON <- readAndStandardizeJSONNetworkFile(graph.json.filename)
style.json.filename <- "CF_network_style.json"
head(graph.nodes.df)
colnames(graph.nodes.df)
pathways_names <- c("C-type lectin receptor signaling pathway",
"Cytokine-cytokine receptor interaction",
"Cytosolic DNA-sensing pathway",
"Estrogen signaling pathway",
"IL-17 signaling pathway",
"NF-kappa B signaling pathway",
"NOD-like receptor signaling pathway",
"Osteoclast differentiation",
"Regulation of actin cytoskeleton",
"RIG-I-like receptor signaling pathway",
"T cell receptor signaling pathway",
"Th17 cell differentiation",
"TNF signaling pathway",
"Toll-like receptor signaling pathway",
"Viral protein interaction with cytokine and cytokine receptor")
pathways_names
gsub("[[:punct:]]+|[[:space:]]", "_", pathways_names)
pathways_colnames <- "data." + gsub("[[:punct:]]+|[[:space:]]", "_", pathways_names)
pathways_colnames <- paste("data.", gsub("[[:punct:]]+|[[:space:]]", "_", pathways_names), sep = "")
pathways_colnames
pathways_colnames %in% colnames(graph.nodes.df)
runApp()
graph.nodes.df[,pathways_colnames[5]]
graph.nodes.df[,pathways_colnames[5]]==1
runApp()
PathwayNames <- pathways_names[5]
PathwayNames
PathwayIds <- paste("data.",
gsub("[[:punct:]]+|[[:space:]]",
"_",
PathwayNames),
sep = "")
PathwayIds
gene_id <- graph.nodes.df[which(graph.nodes.df[,PathwayIds]==1),
"data.id"]
gene_id
runApp()
runApp()
source('~/ownCloud/Code/cyjShiny/inst/demos/tinyApp/tinyApp.R')
runApp()
View(graph.nodes.df)
graph.nodes.df$data.CFTR_interactor
table(graph.nodes.df$data.CFTR_interactor)
CFTR_interactor <- graph.nodes.df[which(graph.nodes.df$data.CFTR_interactor==T),
"data.name"]
CFTR_interactors <- graph.nodes.df[which(graph.nodes.df$data.CFTR_interactor==T),
"data.name"]
CFTR_interactors
colnames(graph.nodes.df)
table(graph.nodes.df$data.Node_type)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
library(rsconnect)
rsconnect::deployApp()
